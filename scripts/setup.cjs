#!/usr/bin/env node

/**
 * Orchestro Interactive Setup Script
 *
 * Quick setup wizard for Orchestro MCP server
 * Usage: npm run setup
 */

const readline = require('readline');
const fs = require('fs');
const path = require('path');
const { exec } = require('child_process');
const os = require('os');

// Colors for terminal output
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  green: '\x1b[32m',
  blue: '\x1b[34m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
};

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function print(text, color = 'reset') {
  console.log(`${colors[color]}${text}${colors.reset}`);
}

function question(query) {
  return new Promise(resolve => rl.question(query, resolve));
}

async function checkPrerequisites() {
  print('\n🔍 Checking prerequisites...', 'blue');

  // Check Node.js version
  const nodeVersion = process.version.slice(1).split('.')[0];
  if (parseInt(nodeVersion) < 18) {
    print(`❌ Node.js 18+ required. You have ${process.version}`, 'red');
    process.exit(1);
  }
  print(`✓ Node.js ${process.version}`, 'green');

  // Check if Claude Code config exists
  const configPath = getClaudeConfigPath();
  if (fs.existsSync(configPath)) {
    print(`✓ Claude Code config found`, 'green');
  } else {
    print(`⚠️  Claude Code config not found at ${configPath}`, 'yellow');
    print(`   Will create it during setup`, 'yellow');
  }
}

function getClaudeConfigPath() {
  const platform = os.platform();
  const home = os.homedir();

  switch(platform) {
    case 'darwin': // macOS
      return path.join(home, 'Library', 'Application Support', 'Claude', 'claude_desktop_config.json');
    case 'win32': // Windows
      return path.join(process.env.APPDATA, 'Claude', 'claude_desktop_config.json');
    case 'linux':
      return path.join(home, '.config', 'Claude', 'claude_desktop_config.json');
    default:
      throw new Error(`Unsupported platform: ${platform}`);
  }
}

async function collectUserInput() {
  print('\n📋 Project Configuration', 'blue');

  const config = {};

  // Database URL
  print('\n💾 Supabase Configuration');
  print('   Get your connection string from: https://supabase.com/dashboard/project/_/settings/database', 'yellow');
  config.databaseUrl = await question('\n? Database URL (pooler connection): ');

  if (!config.databaseUrl.includes('pooler.supabase.com')) {
    print('\n⚠️  Warning: Using direct connection. Pooler is recommended for MCP servers.', 'yellow');
    print('   Pooler URL format: postgresql://postgres.[REF]:[PASSWORD]@aws-0-[REGION].pooler.supabase.com:6543/postgres', 'yellow');
    const useAnyway = await question('\nContinue anyway? (y/N): ');
    if (useAnyway.toLowerCase() !== 'y') {
      print('\n❌ Setup cancelled', 'red');
      process.exit(0);
    }
  }

  // Extract Supabase URL from database URL
  const urlMatch = config.databaseUrl.match(/pooler\.supabase\.com|supabase\.co/);
  if (urlMatch) {
    const ref = config.databaseUrl.match(/postgres\.([^:]+)/)?.[1];
    if (ref) {
      config.supabaseUrl = `https://${ref}.supabase.co`;
    }
  }

  if (!config.supabaseUrl) {
    config.supabaseUrl = await question('? Supabase Project URL (https://xxx.supabase.co): ');
  }

  // Service key (optional)
  print('\n🔑 Service Key (optional, for admin operations)');
  const needsServiceKey = await question('? Do you have a Supabase service key? (y/N): ');
  if (needsServiceKey.toLowerCase() === 'y') {
    config.supabaseServiceKey = await question('? Service Key: ');
  }

  // Project name
  print('\n📁 Project Settings');
  const defaultName = path.basename(process.cwd());
  const projectName = await question(`? Project name (${defaultName}): `);
  config.projectName = projectName || defaultName;

  return config;
}

async function createEnvFile(config) {
  print('\n⚙️  Creating .env file...', 'blue');

  const envContent = `# Orchestro Configuration
# Generated by setup script on ${new Date().toISOString()}

# Supabase Database
DATABASE_URL=${config.databaseUrl}
SUPABASE_URL=${config.supabaseUrl}
${config.supabaseServiceKey ? `SUPABASE_SERVICE_KEY=${config.supabaseServiceKey}` : '# SUPABASE_SERVICE_KEY=your-service-key-here'}

# Project Settings
PROJECT_NAME=${config.projectName}

# Server Settings
PORT=3000
NODE_ENV=development
`;

  const envPath = path.join(process.cwd(), '.env');
  fs.writeFileSync(envPath, envContent);

  print('✓ .env file created', 'green');
}

async function runMigrations() {
  print('\n🗄️  Running database migrations...', 'blue');

  return new Promise((resolve, reject) => {
    exec('npm run migrate', (error, stdout, stderr) => {
      if (error) {
        print(`❌ Migration failed: ${error.message}`, 'red');
        print('\nYou can run migrations manually later with: npm run migrate', 'yellow');
        resolve(false);
      } else {
        print('✓ Database migrations completed', 'green');
        resolve(true);
      }
    });
  });
}

async function configureClaudeCode(config) {
  print('\n🔧 Configuring Claude Code...', 'blue');

  const configPath = getClaudeConfigPath();
  const orchestroPath = path.join(process.cwd(), 'dist', 'server.js');

  let claudeConfig = {};

  // Read existing config if it exists
  if (fs.existsSync(configPath)) {
    try {
      claudeConfig = JSON.parse(fs.readFileSync(configPath, 'utf8'));
    } catch (error) {
      print(`⚠️  Could not parse existing config: ${error.message}`, 'yellow');
      claudeConfig = {};
    }
  }

  // Add Orchestro to mcpServers
  if (!claudeConfig.mcpServers) {
    claudeConfig.mcpServers = {};
  }

  claudeConfig.mcpServers.orchestro = {
    command: 'node',
    args: [orchestroPath],
    env: {
      DATABASE_URL: config.databaseUrl
    }
  };

  // Ensure directory exists
  const configDir = path.dirname(configPath);
  if (!fs.existsSync(configDir)) {
    fs.mkdirSync(configDir, { recursive: true });
  }

  // Write config
  fs.writeFileSync(configPath, JSON.stringify(claudeConfig, null, 2));

  print('✓ Claude Code configured', 'green');
  print(`\n📝 Config location: ${configPath}`, 'blue');
}

async function verifySetup() {
  print('\n✅ Verifying setup...', 'blue');

  // Check if build exists
  const distPath = path.join(process.cwd(), 'dist', 'server.js');
  if (!fs.existsSync(distPath)) {
    print('⚠️  Building TypeScript...', 'yellow');
    return new Promise((resolve) => {
      exec('npm run build', (error, stdout, stderr) => {
        if (error) {
          print(`❌ Build failed: ${error.message}`, 'red');
          resolve(false);
        } else {
          print('✓ Build successful', 'green');
          resolve(true);
        }
      });
    });
  }

  print('✓ Build verified', 'green');
  return true;
}

async function printNextSteps() {
  print('\n' + '='.repeat(50), 'bright');
  print('\n🎉 Setup Complete!', 'green');
  print('\n' + '='.repeat(50), 'bright');

  print('\n📋 Next Steps:', 'blue');
  print('\n1. Restart Claude Code');
  print('   • macOS: Cmd+Q and reopen');
  print('   • Windows: Close and reopen');
  print('   • Linux: killall claude-code && claude-code &');

  print('\n2. Verify MCP connection');
  print('   Ask in Claude Code: "Show me all orchestro tools"');
  print('   You should see 27 tools listed!');

  print('\n3. Start the dashboard (optional)');
  print('   Run: npm run dashboard');
  print('   Opens: http://localhost:3000');

  print('\n4. Create your first task');
  print('   Ask Claude: "Create an orchestro task for user authentication"');

  print('\n📚 Documentation:', 'blue');
  print('   • Integration Guide: INTEGRATION_GUIDE.md');
  print('   • PM Guide: PM_GUIDE.md');
  print('   • Developer Guide: DEV_GUIDE.md');

  print('\n💡 Pro Tip:', 'yellow');
  print('   Use AI to decompose user stories:');
  print('   "Decompose this story: User should login with email/password"');

  print('\n🎭 Happy Orchestrating!\n', 'bright');
}

async function main() {
  print('\n🎭 Orchestro Setup Wizard', 'bright');
  print('━'.repeat(50), 'bright');

  try {
    await checkPrerequisites();

    const config = await collectUserInput();

    await createEnvFile(config);

    const buildSuccess = await verifySetup();
    if (!buildSuccess) {
      print('\n⚠️  Setup completed with warnings', 'yellow');
      print('   Please run "npm run build" manually', 'yellow');
    }

    const migrationsSuccess = await runMigrations();

    await configureClaudeCode(config);

    await printNextSteps();

    // Ask if user wants to start dashboard
    const startDashboard = await question('\n? Start dashboard now? (Y/n): ');
    if (startDashboard.toLowerCase() !== 'n') {
      print('\n🚀 Starting dashboard...', 'blue');
      exec('npm run dashboard', (error) => {
        if (error) {
          print(`❌ Could not start dashboard: ${error.message}`, 'red');
          print('   Run manually with: npm run dashboard', 'yellow');
        }
      });
    }

  } catch (error) {
    print(`\n❌ Setup failed: ${error.message}`, 'red');
    print('\nPlease check the error and try again.', 'yellow');
    print('For help, see: INTEGRATION_GUIDE.md', 'yellow');
  } finally {
    rl.close();
  }
}

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
  print('\n\n❌ Setup cancelled by user', 'red');
  rl.close();
  process.exit(0);
});

main();
